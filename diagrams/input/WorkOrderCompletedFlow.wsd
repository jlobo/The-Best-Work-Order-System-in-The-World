@startuml WorkOrderCompletedFlow
title Work Order Completed
skinparam monochrome true

actor Operator as oper

box "Work Order Api" #Withe
participant "WorkOrder\nController" as work
database "WorkOrder\nRepository" as db
end box

box "Notification Api" #Withe
participant "Notification\nController" as noti
end box

oper -> work: ChangeStatus(newWorkOrder)
note right: lock thread for newWorkOrder.id
activate work

work -> db: Get(newWorkOrder.id)
activate db

db --> work: currentWorkOrder
deactivate db

alt newWorkOrder.status == "started" &&\n currentWorkOrder.status == "started"
    work --> oper: [false, Error("work order has already been started")]    

else newWorkOrder.status == "started" &&\n currentWorkOrder.status == "completed"
    work --> oper: [false, Error("work order has already been completed")]    

else newWorkOrder.status == "started"
    work -> noti: Push(newWorkOrder.id,\n newWorkOrder.status, newWorkOrder.operatorId)
    activate noti

    work -> db: Change(newWorkOrder)
    activate db

    db --> work: ok
    deactivate db

    noti --> work: ok
    deactivate noti

    work --> oper: true
    deactivate work

    hnote over work: previousWorkOrder = currentWorkOrder
    work -> work: LaunchThreadCheck\n(previousWorkOrder, 30)
    activate work

end

...**Less than 30 seconds**...

oper -> work: ChangeStatus(completedWorkOrder)
note right: lock thread for completedWorkOrder.id
activate work

work -> db: Get(completedWorkOrder.id)
activate db

db --> work: currentWorkOrder
deactivate db

alt completedWorkOrder.status == "completed" &&\n currentWorkOrder.status != "started"
    work --> oper: [false, Error("work order was not started")]    

else completedWorkOrder.status == "completed" &&\n completedWorkOrder.operator != currentWorkOrder.operator
    work --> oper: [false, Error("invalid operator")]    

else completedWorkOrder.status == "completed"
    work -> noti: push(completedWorkOrder.id,\n completedWorkOrder.status, completedWorkOrder.operatorId)
    activate noti

    work -> db: Change(completedWorkOrder)
    activate db

    db --> work: ok
    deactivate db

    noti --> work: ok
    deactivate noti

    work --> oper: true
    deactivate work
end

...**After 30 seconds**...
note right work: lock thread for previousWorkOrder.id
work -> db: Get(previousWorkOrder.id)
activate db

db --> work: currentWorkOrder
deactivate db

alt currentWorkOrder.status == "started"
    work -> noti: push(previousWorkOrder.id,\n previousWorkOrder.status, previousWorkOrder.operatorId)
    activate noti

    work -> db: Change(previousWorkOrder)
    activate db

    db --> work: ok
    deactivate db

    noti --> work: ok
    deactivate noti
    deactivate work
end

@enduml